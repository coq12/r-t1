PartsはPartの集合体である
Partsがpartsを持つようにコードを修正したい
PartsオブジェクトはPartオブジェクトからコンポジションされるようにしたい

class Bicycle
    attr_reader :size, :parts

    def initialize(args={})
        @size  = args[:size]
        @parts = args[:parts]
    end

    def spares
        parts.spares #partsに関する処理を委譲
    end
end




class Parts
    attr_reader :chain, :tire_size


    def initialize(args={})
        @chain = args[:chain] || default_chain
        @tire_size = args[:tire_size] || default_tire_size
        post_initialize(args)
    end

    def spares
        {tire_size: tire_size, chain: chain}.mearge(local_spares)
    end

    def default_tire_size
        raise NotImplementedError
    end

    def post_initialize(args)
        nil
    end

    def local_spares
        {}
    end

    def default_chain
        '10-speed'
    end
end


class RoadBikeParts < Parts
    attr_reader :tape_color

    def post_initialize(args)
        @tape_color = args[:tape_color]
    end

    def local_spares
        {type_color:tape_color}
    end

    def default_tire_size
        '23'
    end
end

class MountainBikeParts < Parts
    attr_reader :front_shock :rear_shock

    def post_initialize(args)
        @front_shock = args[:front_shock]
        @rear_shock = args[:rear_shock]
    end

    def local_spares
        {rear_shock: rear_shock}
    end

    def default_tire_size
        '2.1'
    end
end



修正後のコード-------------------------------------------------------------
class Bicycle
    attr_reader :size, :parts

    def initialize(args={})
        @size  = args[:size]
        @parts = args[:parts]
    end

    def spares
        parts.spares #partsに関する処理を委譲
    end
end

class Parts
    attr_reader :parts

    def initialize(parts)
        @parts = parts
    end

    def spares
        parts.select{|part|part.needs_spare}
    end
end

class Part
    attr_reader :name, :description, :needs_spare


    def initialize(args={})
        @name = args[:name]
        @description = args[:description]
        @needs_spare = args.fetch[:need_spare,true]
    end

end

chain = Part.new(name: 'chain', description: '10-speed')
road_tire = part.new(name: 'tire_size', description: '23')
type = Part.new(name: 'tape_color', description: 'red')
mountain_tire = Part.new(name: 'tire_size', description: '2.1')
rear_shock = Part.new(name: 'rear_shock', description: 'Fox')
front_shock = Part.new(name: 'front_shock', description: 'Manitou', needs_spare: false)
road_bike_parts = Parts.new([chain, road_tire, tape])


road_bike = Bicycle.new(size: 'L', parts: Parts.new([chain, road_tire, tape]))
road_bike.size
road_bike.spares


mountain_bike = Bicycle.new(size: 'L', Parts.new([chain, mountain_tire, front_shock, rear_shock]))
mountain_bike.size
mountain_bike.spares



-------------------------------------------
mountain_bike.spares.size のように、できそうだができない。
mountain_bike.sparesはPartsオブジェクトを返すからである。



class Bicycle
    attr_reader :size, :parts

    def initialize(args={})
        @size  = args[:size]
        @parts = args[:parts]
    end

    def spares
        parts.spares #partsに関する処理を委譲
    end
end

require 'forwardable'

class Parts
    extend Forwardable
    def_delegators :@parts, :size, :each
    include Enumrable

    def initialize(parts)
        @parts=parts
    end

    def spares
        select{|part|part.needs_spare}
    end
end

class Part
    attr_reader :name, :description, :needs_spare


    def initialize(args={})
        @name = args[:name]
        @description = args[:description]
        @needs_spare = args.fetch[:need_spare,true]
    end

end

chain = Part.new(name: 'chain', description: '10-speed')
road_tire = part.new(name: 'tire_size', description: '23')
type = Part.new(name: 'tape_color', description: 'red')
mountain_tire = Part.new(name: 'tire_size', description: '2.1')
rear_shock = Part.new(name: 'rear_shock', description: 'Fox')
front_shock = Part.new(name: 'front_shock', description: 'Manitou', needs_spare: false)
road_bike_parts = Parts.new([chain, road_tire, tape])


mountain_bike = Bicycle.new(size: 'L', Parts.new([chain, mountain_tire, front_shock, rear_shock]))

mountain_bike.spares.size #sparesはPartオブジェクトの配列を返すため、sizeを理解する
mountain_bike.parts.size  #partsはPartsインスタンスを返すため、sizeを理解しない、しかし、
　　　　　　　　　　　　　  #sizeとeachメッセージに関してPartsインスタンスから、@parts配列に委譲することで理解できるようにしている
　　　　　　　　　　　　　　#size,eachとは別に、Enumrableモジュールにて操作、検索系のメッセージを理解可能としている



-------------------------------------------


partsを製造するためのPartsFactory用のコンフィグ
read_config = [['chain', '10-speed'],['tire_size', '23'],['type_color', 'red']]

mountain_config = [['chain', '10-speed'],['tire_size', '2.1'],['front_shock', 'Manitou', 'Fox']]

module PartsFactory
    def self.build(config, part_class = Part, parts_class = Parts)
        parts_class.new(
            config.collect{|part_config|
                part_class.new(name: part_config[0], description: part_config[1], needs_spare: part_config.fetch(2,true))
            }
        )
    end
end

road_parts = PartsFactory.build(read_config)

mountain_parts = PartsFactory.build(mountain_config)


---------------------------------------------

partsを製造するためのPartsFactory用のコンフィグ
read_config = [['chain', '10-speed'],['tire_size', '23'],['type_color', 'red']]
mountain_config = [['chain', '10-speed'],['tire_size', '2.1'],['front_shock', 'Manitou', 'Fox']]

require 'ostruct'

module PartsFactory
    def self.build(config.parts_class = Parts)
        parts_class.new(
            config.collect{|part_config|
                create_part(part_config)
            }
        )
    end

    def self.create_part(part_config)
        OpenStruct.new(
            name: part_config[0],
            description: part_config[1],
            needs_spare: part_config.fetch(2, true)
        )
    end
end

mountain_parts = PartsFactory.build(mountain_config)


コンポーズする完成系
-----------------------------------------------------------------------------------------------------------

class Bicycle
    attr_reader :size, :parts

    def initialize(args={})
        @size = args[:size]
        @parts = args[:parts]
    end

    def spares
        parts.spares
    end
end

require 'fowardable'

class Parts
    extend Forwardable
    def_delegators :@parts, :size, :each
    include Enumerable

    def initialize(parts)
        @parts = parts
    end

    def spares
        select{|parts|parts.needs_spare}
    end
end

require 'ostruct'

module PartsFactory
    def self.build(config, parts_class = Parts)
        parts_class.new(
            config.collect{|part_config|
                create_parts(part_config)
            }
        )
    end
    def self.create_part(part_config)
        OpenStruct.new(
            name: part_config[0],
            description: part_config[1],
            needs_spare: part_config.fetch(2, true)
        )
    end
end

read_config = [['chain', '10-speed'],['tire_size', '23'],['type_color', 'red']]
mountain_config = [['chain', '10-speed'],['tire_size', '2.1'],['front_shock', 'Manitou', 'Fox']]

road_bike = Bicycle.new(size:'L', parts:PartsFactory.build(road_config))
road_bike.spares

mountain_bike = Bicycle.new(size:'L', parts:PartsFactory.build(mountain_config))
mountain_bike.spares

-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------

class Bicycle

    attr_reader :size, :parts

    def initialize(args={})
        @size = args[:size]
        @parts = args[:parts]
    end

    def spares
        parts.spares
    end
end


require 'fowardable'

class Parts

    extend Forwardable
    def_delegators :@parts, :size, :each
    include Enumerable

    def initialize(parts)
        @parts = parts
    end

    def spares
        select{|parts|parts.needs_spares}
    end

end


module PartsFactory

    def self.build(config, parts_class = Parts)
        parts_class.new(
            config.collect{|part_config|
                create_parts(part_config)
            }

        )
    end

    def self.crate_parts(part_config)
        OpenStruct.new(name: part_config[0], description: part_config[1], needs_spare: parts_config.fetch(2, true))
    end

end

read_config = [['chain', '10-speed'],['tire_size', '23'],['type_color', 'red']]
road_bike = Bicycle.new(size:'L', parts:PartsFactory.build(road_config))

-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------




class Bicycle
    attr_reader :size, :parts

    def initialize(args={})
        @size = args[:size]
        @parts = args[:parts]
    end

    def spares
        parts.spares
    end
end

class Parts
    def initialize(parts)
        @parts = parts
    end

    def spares
        parts.select {|part|part.need_spares}
    end
end

module PartsFactory
    def self.build(config, parts_class=Parts)
        parts_class.new(
            config.collect{|part_config|create_part(part_config)}
        )
    end

    def self.create_part(part_config)
        OpenStruct.new(name: part_config[0], description: part_config[1], need_spares: part_config.fetch(2, true))
    end
end


road_config = [['chain', '10-speed'],['tire_size', '23'],['type_color', 'red']]
road_bike = Bicycle.new(size: 'L', parts: PartsFactory.build(road_config))







★ポイント
ほぼ同一のオブジェクトが複数個必要な場合 -> is-a の関係 ->継承を使う
ロールがそのオブジェクトの主な役割(ロール)ではない場合 -> 自転車がスケジュール可能であることのような場合 -> ダックタイプ
オブジェクトがパーツを持つ場合 -> コンポジション