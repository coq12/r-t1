some_object



some_object = Trip.new
some_object.prepare(mechanic)

class Trip
    attr_reader :bicycles,:customers,:vehicle

    #引数のmachanicは自転車を準備してくれるものを持っていると信じている
    def prepare(mechanic)
        mechanic.prepare_bicycles(bicycles)
    end
end


class Mechanic
    def prepare_bicycles(bicycles)
        bicycles.each{|bicycle|prepare_bicycle(bicycle)}
    end
end


    def prepare_bicycle(bicycle)

    end
end

改善しようとしてより複雑にする
依存満載のコードが下記
#prepareメソッドは異なるクラスをべた書きで指定
#prepareメソッドは他のクラスの変更により変更が強制される可能性がある
#改善ではない！改悪だ！！
#prepareメソッドには、prepare_bicyclesメソッド持ってるメソッドなら何を渡してもいいや
#という考えのもと大失敗をしている
#メソッドはいくつものクラスを知っていて、クラスに基づいて送るメッセージが分岐される

class Trip
    attr_reader :bicycles, :vehicle


    def prepare(prepares)
        prepares.each {|prepare|
            case preparer
            when Mechanic
                preparer.prepare_bicycles(bicycles)
            when TripCoordinator
                preparer.buy_food(customers)
            when Driver
                preparer.gas_up(vehicle)
                preparer.fill_water_tank(vehicle)
            end
        }
    end
end

class TripCoordinator
    def buy_food(customers)
    end
end


class Driver
    def gas_up(vehicle)
    end

    def fill_water_tank(vehicle)
    end
end


#ダックを見つけて改善する！
#Tripのprepareメソッドは”単一”の目的を果たすために存在する
#存在する理由はprepareメソッドに渡されるインスタンスのクラスには関係ない
#prepareの引数は準備する者であり、クラスはどうでもいい



class Trip
    attr_reader :bicycles, :customers, :vehicle

    def prepare(prepares)
        prepares.each{|prepare|
            prepare.prepare_trip(self)
        }
    end
end

trip = Trip.new
Mechanic.prepare_trip(trip) #bicyclesに対して何かの付属効果が得られた
TripCoordinator.prepare_trip(trip) #customersに対して何らかの付属効果が得られた
Driver.prepare_trip(trip) #vehicleに対して何らかの付属効果が得られた

Tripクラスのインスタンスを基（self）として、
下のprepareクラスたちが装備品をつけてくれる。
装備品は、各インスタンス変数に施されたり

#preparesの配列の中に入るインスタンスのクラスたち
class Mechanic
    def prepare_trip(trip)
        trip.bicycles.each{|bicycle|
            prepare_bicycle(bicycle)
        }
    end
end


class TripCoordinator
    def prepare_trip(trip)
        buy_food(trip.customers)
    end
end

class Driver
    def prepare_trip(trip)
        vehicle = trip.vehicle
        gas_up(vehicle)
        fill_water_tank(vehicle)
    end
end


