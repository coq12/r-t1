変更の起きやすさ
具象と抽象　GearがWheelのインスタンスを持つ定義をしたが、本来、Wheelのインスタンスを持つべきではなく、インターフェイスを持つべき
変更されないであろうが、大量に依存されたクラスは避けるべき


設計に必要なのは
オブジェクトが何を知っているか（オブジェクトの責任）
誰を知っているか（オブジェクトの依存関係）
オブジェクトがどのように会話するか


どのクラスにある、どのメソッドも他のオブジェクトから正当に実行できる状況を防ぐため、
パブリックインタフェースを作り、さらすメソッドを制限する

レストランのメニューのような存在、
それがパブリックインタフェース

厨房がしている動作
それがプライベートインタフェース


クラスは何をすべきなの？ではなく
メッセージに対してどのクラスが応答すべきなのかを考えるようにする
オブジェクトが存在するからメッセージを送るではなく、
メッセージを受け取るためにオブジェクトが存在する


送り手の望みを送るメッセージと
送り手がどのようにふるまうかを贈るメッセージは違う